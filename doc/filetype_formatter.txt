*vim_filetype_formatter.txt* A simple, functional Vim code formatter plugin

Author: Samuel Roeca

Table of Contents                                      *vim-filetype-formatter*

1. Introduction .......................... |vim-filetype-formatter-intro|
2. Configuration ......................... |vim-filetype-formatter-configuration|
3. Commands .............................. |vim-filetype-formatter-commands|
4. Credits ............................... |vim-filetype-formatter-credits|

==============================================================================
1. INTRODUCTION                                  *vim-filetype-formatter-intro*

The |vim-filetype-formatter| plugin simply aplies most command line code
formatters to your Vim buffer. It assumes two things:

1. Your Vim buffer has a filetype
2. You have associated a qualifying system command with your filetype

A system command is "qualifying" if it takes its formatter input from standard
input and writes its formatted output to standard output.

==============================================================================
2. CONFIGURATION                         *vim-filetype-formatter-configuration*

                                             *g:vim_filetype_formatter_command*
g:vim_filetype_formatter_command~

Type: Dictionary[String, Union[String, F]]
      F:
        Function(Integer, Integer) -> String |
        Function() -> String
Default: g:filetype_formatter#ft#defaults

Assume you have two theoretical filetypes: 'dog' and 'cat'. With these two
theoretical filetypes, you have two command line code formatting programs:
'dog-fmt' and 'cat-fmt'. To enable the relevant code formatters to run on both
the 'dog' and the 'cat' filetypes, depending on the command line interface
provided by 'dog-fmt' and 'cat-fmt', you might configure this option as
follows: >

  let g:vim_filetype_formatter_commands = {
      \ 'dog': 'dog-fmt --stdout -',
      \ 'cat': 'cat-fmt --standard-out --std-in',
      \ 'bat': {start, end -> printf('bat-fmt --lines=%d-%d', start, end)},
      \ 'rat': {-> printf('bat-fmt --stdin-file=%s', expand('%:p'))},
      \}
<

If your Dictionary value is a string, it is assumed to operate over an entire
file.

If your Dictionary value is a Function that takes 0 arguments, it may require
some runtime functionality to format your string command, but it's assumed
that the formatter is not aware of visually-selected ranges.

If your Dictionary value takes is a Function that takes two arguments, these
should be the starting line and the ending line. In this case, the formatter
itself will operate over the entire file but only format from "start line" to
"end line". This is good because only running the formatter on selected text
can be breakable without the text's broader context.

                                             *g:vim_filetype_formatter_verbose*
g:vim_filetype_formatter_verbose~

Type: Boolean (or Integer, Vim doesn't care)
Default: 0 (for False)

This plugin follows the "Rule of Silence" from "The Art of Unix Programming".
This means that unsurprising messages are not given to the user. This mode
echos a confirmation the user that a command ran successfully. To enable it,
set this option to anything other than Zero: >

  let g:vim_filetype_formatter_verbose = 1
<
                                         *g:filetype_formatter#ft#formatters*
g:filetype_formatter#ft#formatters~

Type: Dict[String, Dict[String, F]]
Default: Created by this plugin. DON'T EDIT

Variable containing pre-written commands for different code formatters that
we're aware of. For example, if you want to use "yapf" instead of "black" for
Python, place the following in your vimrc: >

  let g:vim_filetype_formatter_commands = {
      \ 'python': g:filetype_formatter#ft#formatters['python']['yapf'],
      \}
<
                                         *g:filetype_formatter#ft#defaults*
g:filetype_formatter#ft#defaults~

Type: Dict[String, F]
Default: Created by this plugin. DON'T EDIT

A variable containing the default, pre-written commands assigned to each
Filetype. Don't edit.

==============================================================================
3. COMMANDS                                   *vim-filetype-formatter-commands*

:FiletypeFormat                                               *:FiletypeFormat*
  Format the entire current buffer using a configured formatter. If the
  buffer's filetype has not been associated with this plugin, it will save an
  error message accessible through :ErrorFiletypeFormat.

  NOTE: this command works on both the entire file and visually selected
  ranges. For visually selected ranges, the code must be "valid" as determined
  by your language's configured formatter. If you visually select code that is
  not considered valid, your formatter will likely raise an exception.

:ErrorFiletypeFormat                                    *:ErrorFiletypeFormat*
  Print any errors from a buffer's most recent formatter function attempt to
  the console.

==============================================================================
4. CREDITS                                     *vim-filetype-formatter-credits*

Special thanks to Chiel ten Brinke for designing vim-autoformat. This plugin
was initially inspired by that interface and simplifies / cleans up a lot of
aspects of that plugin I found annoying. Hopefully this plugin helps more Vim
users get the most out of their command line formatters.

vim:tw=78:ts=8:ft=help:norl:
